{"version":3,"sources":["app.js","oauth2.js","controllers.js","directives.js","filters.js","cloudClient.js","fileManager.js"],"names":["oAuth2ImplicitFlow","authzEndpoint","clientId","baseAddress","base64url","storage","crypto","stateKey","authzUrlTemplate","URITemplate","prepareAuthzRequest","redirectUri","state","Uint8Array","getRandomValues","encode","setItem","authzRequest","expand","client_id","redirect_uri","processAuthzResponse","res","error","e","success","getItem","removeItem","access_token","accessToken","expiresIn","expires_in","app","angular","module","meocloudConfig","apiBaseAddress","root","clientIds","dev","pub","name","displayName","shouldReadTags","constant","config","$locationProvider","$routeProvider","hashPrefix","when","controller","controllerAs","templateUrl","otherwise","redirectTo","run","$http","$httpParamSerializerJQLike","defaults","headers","post","transformRequest","unshift","$window","$location","cloudConfig","fileManager","this","cloudName","hash","path","url","URI","absUrl","query","location","href","toString","client","hasToken","$routeParams","cloudClient","mode","parseQuery","setToken","hasError","emptyFile","artist","title","album","year","ctrl","showFileInfo","currentFile","canPlay","canDelete","next","getRandomFileData","then","data","readTags","tags","deleteCurrent","deleteCurrentFile","hasFiles","update","directive","restrict","scope","clickAction","link","element","attrs","bind","confirm","eventName","handler","filter","$sce","trustAsResourceUrl","factory","adjustApiPath","p","deltaUrl","mediaUrlTemplate","deleteFileUrl","Authorization","getToken","localStorage","tokenKey","token","delta","cursor","callback","console","log","response","updatedItems","deletedPaths","entries","forEach","entry","item","push","promise","has_more","getFileUrl","filePath","method","deleteFile","$q","count","db","lastCursorKey","filesStoreName","openDb","done","request","indexedDB","open","onsuccess","event","target","result","onerror","errorEvent","errorCode","onupgradeneeded","createObjectStore","keyPath","addFile","fileStore","mime_type","startsWith","endsWith","put","info","removeFileIfExists","get","purgefiles","openCursor","some","v","key","getRandomFile","deferred","defer","cnt","Math","floor","random","transaction","objectStore","advance","resolve","value","jsmediatags","read","onSuccess","debug","onError","warn","deltaProcessor","oncomplete","reject","length","is_dir","file","fileData","bytes","btoa","replace","hostname","origin","pathname","sessionStorage"],"mappings":"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","file":"bundle.js","sourcesContent":["'use strict';\n(function () {\n    var app = angular.module('cloudPlayer', [\n        'ngRoute',\n        'cloudPlayer.controllers',\n        'cloudPlayer.filters',\n        'cloudPlayer.directives',\n        'cloudPlayer.oauth2',\n        'cfp.hotkeys'\n    ]);\n\n    var meocloudConfig = {\n        authzEndpoint: 'https://meocloud.pt/oauth2/authorize',\n        apiBaseAddress: 'https://publicapi.meocloud.pt/1',\n        root: 'meocloud',\n        clientIds: {\n            dev: '4722fde2-2f99-4118-9373-3270c572d003',\n            pub: '6abdf380-083a-453a-9e36-1b1528ab8255'\n        },\n        name: 'meocloud',\n        displayName: 'MEO Cloud',\n        shouldReadTags: false\n    };\n\n    /*var dropboxConfig = {\n        authzEndpoint: 'https://www.dropbox.com/1/oauth2/authorize',\n        apiBaseAddress: 'https://api.dropboxapi.com/1',\n        adjustApiPath: function (p) { return p.toLowerCase(); },\n        root: 'auto',\n        clientIds: {\n            dev: '2uj0app9uetkerk',\n            pub: 'TODO'\n        },\n        name: 'dropbox',\n        displayName: 'Dropbox',\n        shouldReadTags: true\n    };*/\n\n    app.constant('cloudConfig', meocloudConfig);\n\n    app.config(['$locationProvider', '$routeProvider', function ($locationProvider, $routeProvider) {\n        $locationProvider.hashPrefix('!');\n        $routeProvider\n            .when('/', {\n                controller: 'HomeCtrl',\n                controllerAs: 'home',\n                templateUrl: 'views/home.html'\n            })\n            .when('/oauth/:mode', {\n                controller: 'OAuthCtrl',\n                controllerAs: 'oauth',\n                templateUrl: 'views/oauth.html'\n            })\n            .when('/player', {\n                controller: 'PlayerCtrl',\n                controllerAs: 'player',\n                templateUrl: 'views/player.html'\n            })\n            .otherwise({\n                redirectTo: '/'\n            });\n    }]);\n\n    app.run(['$http', '$httpParamSerializerJQLike', function ($http, $httpParamSerializerJQLike) {\n        $http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n        $http.defaults.transformRequest.unshift($httpParamSerializerJQLike);\n    }]);\n})();","'use strict';\n\nangular.module('cloudPlayer.oauth2', [])\n\n    // Base64 URL encoding\n    .value('base64url', {\n        encode: function (bytes) {\n            return btoa(bytes)\n                // From https://github.com/RGBboy/urlsafe-base64\n                .replace(/\\+/g, '-') // Convert '+' to '-'\n                .replace(/\\//g, '_') // Convert '/' to '_'\n                .replace(/=+$/, ''); // Remove ending '='\n        }\n    })\n\n    // OAuth 2.0 implicit flow logic\n    .factory('oAuth2ImplicitFlow', ['$window', 'cloudConfig', 'base64url', function ($window, cloudConfig, base64url) {\n        return oAuth2ImplicitFlow(\n            cloudConfig.authzEndpoint,\n            $window.location.hostname === 'localhost' || $window.location.hostname === '127.0.0.1' ? cloudConfig.clientIds.dev : cloudConfig.clientIds.pub,\n            $window.location.origin + $window.location.pathname,\n            base64url,\n            $window.sessionStorage,\n            $window.crypto);\n    }]);\n\nfunction oAuth2ImplicitFlow (authzEndpoint, clientId, baseAddress, base64url, storage, crypto) {\n\n    var stateKey = 'oauth_state';\n\n    var authzUrlTemplate = new URITemplate(authzEndpoint + '?response_type=token&client_id={client_id}&redirect_uri={redirect_uri}&state={state}');\n\n    return {\n        prepareAuthzRequest: function (redirectUri) {\n            var state = new Uint8Array(128 / 8);\n            crypto.getRandomValues(state);\n            state = base64url.encode(state);\n            storage.setItem(stateKey, state);\n\n            var authzRequest = authzUrlTemplate.expand({\n                'client_id': clientId,\n                'redirect_uri': baseAddress + redirectUri,\n                state: state\n            });\n            return authzRequest;\n        },\n\n        processAuthzResponse: function (res) {\n\n            var error = function (e) {\n                return {\n                    success: false,\n                    error: e\n                };\n            };\n\n            if (!res.state) {\n                return error('invalid response');\n            }\n\n            // Check state\n            var state = storage.getItem(stateKey);\n            storage.removeItem(stateKey);\n            if (!state || state !== res.state) {\n                return error('missing or invalid state');\n            }\n\n            if (res.error) {\n                return error(res.error);\n            }\n\n            if (!res.access_token) {\n                return error('invalid response');\n            }\n\n            return {\n                success: true,\n                accessToken: res.access_token,\n                expiresIn: res.expires_in\n            }\n        }\n    };\n}","'use strict';\n\nangular.module('cloudPlayer.controllers', ['cloudPlayer.oauth2', 'cloudPlayer.services'])\n\n    .controller('HomeCtrl', ['$window', '$location', 'cloudConfig', 'fileManager',\n        function ($window, $location, cloudConfig, fileManager) {\n\n            this.cloudName = cloudConfig.displayName;\n\n            // OAuth callbacks are delivered on the root; route accordingly if needed.\n            if ($location.hash()) {\n                $location.path('/oauth/callback');\n            }\n\n            // MEO Cloud has a bug and doesn't return errors on the URL fragment. Assume this\n            // is a bogus OAuth callback if it has query string.\n            var url = new URI($location.absUrl());\n            if (url.query()) {\n                url.hash(url.query());\n                url.query('');\n                $window.location.href = url.toString();\n                return;\n            }\n\n            if (fileManager.client.hasToken()) {\n                $location.path('/player');\n                return;\n            }\n        }])\n\n    .controller('OAuthCtrl', ['$window', '$location', '$routeParams', 'oAuth2ImplicitFlow', 'cloudClient',\n        function ($window, $location, $routeParams, oAuth2ImplicitFlow, cloudClient) {\n\n            if ($routeParams.mode === 'authorize') {\n                $window.location.href = oAuth2ImplicitFlow.prepareAuthzRequest('');\n            } else if ($routeParams.mode === 'callback') {\n                var res = oAuth2ImplicitFlow.processAuthzResponse(URI.parseQuery($location.hash()));\n                if (res.success) {\n                    cloudClient.setToken(res.accessToken);\n                    $location.url('/player');\n                } else {\n                    this.hasError = true;\n                    this.error = res.error;\n                }\n            }\n        }])\n\n    .controller('PlayerCtrl', ['$location', 'cloudConfig', 'fileManager',\n        function ($location, cloudConfig, fileManager) {\n\n            var emptyFile = function (url) {\n                return {\n                    artist: 'Artist',\n                    title: 'Title',\n                    album: 'Album',\n                    year: 'year',\n                    url: url\n                }\n            };\n\n            var ctrl = this;\n\n            ctrl.showFileInfo = cloudConfig.shouldReadTags;\n            ctrl.currentFile = emptyFile();\n            ctrl.canPlay = false;\n            ctrl.canDelete = false;\n\n            if (!fileManager.client.hasToken()) {\n                $location.path('/');\n                return;\n            }\n\n            ctrl.next = function () {\n                ctrl.canDelete = false;\n                return fileManager.getRandomFileData().then(function (data) {\n                    ctrl.currentFile = emptyFile(data.url);\n                    ctrl.canDelete = true;\n\n                    if (cloudConfig.shouldReadTags && data.readTags) {\n                        data.readTags().then(function (tags) {\n                            ctrl.currentFile.artist = tags.artist || 'N/A';\n                            ctrl.currentFile.title = tags.title || 'N/A';\n                            ctrl.currentFile.album = tags.album || 'N/A';\n                            ctrl.currentFile.year = tags.year || 'N/A';\n                        });\n                    }\n                })\n            };\n\n            ctrl.deleteCurrent = function () {\n\n                ctrl.canPlay = false;\n                ctrl.canDelete = false;\n                ctrl.currentFile = emptyFile;\n\n                fileManager.deleteCurrentFile().then(function () {\n                    if (fileManager.hasFiles()) {\n                        ctrl.next().then(function () {\n                            ctrl.canPlay = true;\n                        });\n                    }\n                });\n            };\n\n            fileManager.update()\n                .then(function () {\n                    if (fileManager.hasFiles()) {\n                        ctrl.next().then(function () {\n                            ctrl.canPlay = true;\n                        });\n                    }\n                });\n        }])\n\n    ;","angular.module('cloudPlayer.directives', [])\n\n    .directive('cpConfirmClick', ['$window', function ($window) {\n        return {\n            restrict: 'A',\n            scope: { clickAction: '&cpConfirmClick' },\n            link: function (scope, element, attrs) {\n                element.bind('click', function () {\n                    if ($window.confirm('Are you sure?')) {\n                        scope.clickAction();\n                    }\n                });\n            }\n        };\n    }])\n\n    .directive('cpBind', [function () {\n        return {\n            restrict: 'A',\n            scope: { eventName: '@cpBind', handler: '&cpBindHandler' },\n            link: function (scope, element, attrs) {\n                element.bind(scope.eventName, scope.handler);\n            }\n        };\n    }])\n\n    ;","angular.module('cloudPlayer.filters', [])\n    .filter('trustedUrl', ['$sce', function ($sce) {\n        return function (url) {\n            return $sce.trustAsResourceUrl(url);\n        };\n    }]);","'use strict';\n\nangular.module('cloudPlayer.services', [])\n    .factory('cloudClient', ['$window', '$http', 'cloudConfig', function ($window, $http, cloudConfig) {\n\n        var adjustApiPath = cloudConfig.adjustApiPath || function (p) { return p; };\n        var deltaUrl = cloudConfig.apiBaseAddress + adjustApiPath('/Delta');\n        var mediaUrlTemplate = new URITemplate(cloudConfig.apiBaseAddress + adjustApiPath('/Media/') + cloudConfig.root + '{+path}');\n        var deleteFileUrl = cloudConfig.apiBaseAddress + adjustApiPath('/Fileops/Delete');\n        var headers = {\n            Authorization: function () {\n                return 'Bearer ' + getToken();\n            }\n        };\n\n        var storage = $window.localStorage;\n        var tokenKey = cloudConfig.name + '_oauth_token';\n        var token = null;\n\n        var getToken = function () {\n            token = token || storage.getItem(tokenKey);\n            return token;\n        };\n\n        var delta = function (cursor, callback) {\n            $window.console.log('DELTA %s', cursor);\n            return $http\n                .post(deltaUrl, { cursor: cursor }, { headers: headers })\n                .then(function (response) {\n                    var data = response.data;\n                    var updatedItems = [];\n                    var deletedPaths = [];\n                    data.entries.forEach(function (entry) {\n                        // entry => [path, metadata]\n                        var item = entry[1];\n                        if (item !== null) {\n                            item.path = entry[0]; // Easier for later comparisons (casing is diferent on 'path' and on 'metadata.path')\n                            updatedItems.push(entry[1]);\n                        } else {\n                            deletedPaths.push(entry[0]);\n                        }\n                    });\n\n                    var promise = callback(updatedItems, deletedPaths, data.cursor);\n\n                    if (data.has_more) {\n                        promise = promise.then(function () {\n                            // When 'then' callbacks return a promise, it is chained.\n                            return delta(data.cursor, callback);\n                        });\n                    }\n\n                    return promise;\n                });\n        };\n\n        return {\n\n            hasToken: function () {\n                return getToken() !== null;\n            },\n            setToken: function (accessToken) {\n                storage.setItem(tokenKey, accessToken);\n                token = null;\n            },\n\n            // Checks for incoming changes since a given reference cursor.\n            delta: delta,\n\n            // Get a direct URL for a file given its path on the cloud.\n            getFileUrl: function (filePath) {\n                return $http({\n                    method: 'POST',\n                    url: mediaUrlTemplate.expand({ path: filePath }),\n                    headers: headers\n                }).then(function (response) {\n                    return response.data;\n                });\n            },\n\n            // Delete a file given its path on the cloud.\n            deleteFile: function (filePath) {\n                return $http.post(\n                    deleteFileUrl,\n                    { path: filePath, root: cloudConfig.root },\n                    { headers: headers });\n            }\n        };\n    }]);","'use strict';\n\nangular.module('cloudPlayer.services')\n    .factory('fileManager', ['$window', '$q', 'cloudClient', 'cloudConfig', function ($window, $q, cloudClient, cloudConfig) {\n\n        var currentFile = null;\n        var count = 0;\n        var db = null;\n        var lastCursorKey = cloudConfig.name + '_last_cursor';\n        var filesStoreName = 'files';\n\n        // Database actions\n\n        var openDb = function (done) {\n            if (db !== null) {\n                done();\n                return;\n            }\n\n            var request = $window.indexedDB.open(cloudConfig.name, 1);\n            request.onsuccess = function (event) {\n                // Store the db object\n                db = event.target.result;\n                // Generic error handler\n                db.onerror = function (errorEvent) {\n                    $window.console.error(\"Database error: \" + errorEvent.target.errorCode);\n                };\n                done();\n            };\n            request.onupgradeneeded = function (event) {\n                // This is invoked before the 'onsuccess' event, if any changes are needed\n                var db = event.target.result;\n                $window.console.log('Creating files object store');\n                db.createObjectStore(filesStoreName, { keyPath: \"path\" });\n            }\n        };\n\n        var addFile = function (item, fileStore) {\n            if (item.mime_type.startsWith('audio/mpeg') || item.mime_type === 'audio/wav' || item.path.endsWith('.mp3')) {\n                fileStore\n                    .put({ path: item.path, tags: null })\n                    .onsuccess = function () { $window.console.info('ADD %s', item.path); };\n            } else {\n                $window.console.log('IGNORE %s due to mime-type %s', item.path, item.mime_type);\n            }\n        };\n\n        var removeFileIfExists = function (item, fileStore) {\n            fileStore\n                .get(item.path)\n                .onsuccess = function (event) {\n                    // Was indeed a file. Remove it.\n                    if (event.target.result) {\n                        fileStore\n                            .delete(item.path)\n                            .onsuccess = function () { $window.console.info('REMOVE %s', item.path); };\n                    }\n                };\n        };\n\n        var purgefiles = function (deletedPaths, fileStore) {\n            $window.console.log('Paths were deleted:');\n            $window.console.log(deletedPaths);\n\n            // Iterate the existing files and remove the deleted paths and all their children\n            fileStore.openCursor().onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    // Check if the current file is a child of the deleted paths (or one of them)\n                    if (deletedPaths.some(function (v) { return cursor.key.startsWith(v); })) {\n                        cursor.delete().onsuccess = function () {\n                            $window.console.info('REMOVE %s', cursor.key);\n                            cursor.continue();\n                        };\n                    } else {\n                        cursor.continue();\n                    }\n                }\n            };\n        };\n\n        var getRandomFile = function () {\n\n            var deferred = $q.defer();\n            var cnt = Math.floor(Math.random() * count);\n            db\n                .transaction(filesStoreName)\n                .objectStore(filesStoreName)\n                .openCursor()\n                .onsuccess = function (event) {\n                    var cursor = event.target.result;\n                    if (cnt > 0) {\n                        cursor.advance(cnt);\n                        cnt = -1;\n                    } else {\n                        deferred.resolve(cursor.value);\n                    }\n                };\n            return deferred.promise;\n        };\n\n        var readTags = function (item, url) {\n\n            var deferred = $q.defer();\n\n            if (item.tags) {\n                deferred.resolve(item.tags);\n                return deferred.promise;\n            }\n\n            jsmediatags.read(url, {\n                onSuccess: function (res) {\n\n                    var tags = {\n                        artist: res.tags.artist,\n                        title: res.tags.title,\n                        album: res.tags.album,\n                        year: res.tags.year\n                    };\n\n                    // Store tags on DB if artist or title are known\n                    if (tags.artist || tags.title) {\n                        item.tags = tags;\n                        db\n                            .transaction(filesStoreName, 'readwrite')\n                            .objectStore(filesStoreName)\n                            .put(item)\n                            .onsuccess = function () { $window.console.debug('Updated tags for %s', item.path); };\n                    }\n\n                    deferred.resolve(tags);\n                },\n                onError: function (error) {\n                    $window.console.warn('Cannot read tags for %s', item.path);\n                    $window.console.warn(error);\n                    deferred.resolve({});\n                }\n            });\n\n            return deferred.promise;\n        };\n\n        // Process updates from the cloud service (in batches). Returns a promise.\n\n        var deltaProcessor = function (updatedItems, deletedPaths, cursor) {\n\n            var deferred = $q.defer();\n\n            var transaction = db.transaction(filesStoreName, 'readwrite');\n            // DB requests will be triggered on this transaction. When it completes, all the requests have succeeded.\n            transaction.oncomplete = function () {\n                // Store the last known cursor (this helps when something fails in large deltas)\n                $window.localStorage.setItem(lastCursorKey, cursor);\n                deferred.resolve();\n            };\n            transaction.onerror = function () {\n                deferred.reject();\n            };\n\n            var fileStore = transaction.objectStore(filesStoreName);\n\n            if (deletedPaths.length > 0) {\n                purgefiles(deletedPaths, fileStore);\n            }\n\n            updatedItems.forEach(function (item) {\n                if (item.is_dir) {\n                    removeFileIfExists(item, fileStore);\n                } else {\n                    addFile(item, fileStore);\n                }\n            });\n\n            return deferred.promise;\n        };\n\n        // Public API\n\n        var update = function () {\n            return $q(function (resolve) {\n                openDb(function () {\n                    // Get updates since the last known cursor\n                    $window.console.log('UPDATE STARTED');\n                    cloudClient\n                        .delta($window.localStorage.getItem(lastCursorKey), deltaProcessor)\n                        .then(function () {\n                            // Get an updated file count\n                            db.transaction(filesStoreName)\n                                .objectStore(filesStoreName)\n                                .count()\n                                .onsuccess = function (event) {\n                                    count = event.target.result;\n                                    $window.console.info('UPDATE COMPLETED Total files: %d', count);\n                                    resolve();\n                                };\n                        });\n                });\n            });\n        };\n\n        return {\n            client: cloudClient,\n            hasFiles: function () {\n                return count !== 0;\n            },\n            update: update,\n            getRandomFileData: function () {\n                return getRandomFile().then(function (file) {\n                    currentFile = file;\n                    return cloudClient.getFileUrl(file.path).then(function (fileData) {\n                        var res = {\n                            url: fileData.url\n                        };\n\n                        if (cloudConfig.shouldReadTags) {\n                            res.readTags = function () {\n                                return readTags(file, fileData.url);\n                            };\n                        }\n\n                        return res;\n                    });\n                });\n            },\n            deleteCurrentFile: function () {\n                return cloudClient\n                    .deleteFile(currentFile.path)\n                    .then(function () {\n                        currentFile = null;\n                        return update();\n                    });\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}